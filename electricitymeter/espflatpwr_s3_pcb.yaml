---
######################### Electricity Meter ################################
# https://www.esphome-devices.com/devices/ESP32-Deep-Sleep-BME280
substitutions:
  device_name: espflatpwr

esphome:
  name: ${device_name}

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3

wifi:
  fast_connect: true
  domain: !secret iotdomain
  ssid: !secret wifissid
  password: !secret wifipass

mqtt:
  broker: !secret ip_mqttbroker
  discovery: false
  discovery_retain: false
  on_message:
    - topic: ${device_name}/nosleep
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
    - topic: ${device_name}/sleep
      payload: 'ON'
      then:
        - deep_sleep.enter: 
            id: deep_sleep_1 
            sleep_duration: !lambda 'return id(global_sleep_duration) * 1000;' # Convert seconds to milliseconds

# Enable logging
logger:
  # level: DEBUG
  level: WARN
  baud_rate: 0

ota:
  - platform: esphome
    password: !secret espotapass
    on_begin:
      - deep_sleep.prevent: deep_sleep_1

# If you wanna check the logs, you can uncomment this and set the log level to DEBUG
# api:
#   encryption:
#     key: KEY

deep_sleep:
  id: deep_sleep_1

uart:
  id: uart_bus
  tx_pin: GPIO38 # Unused
  rx_pin: GPIO7
  baud_rate: 9600
  data_bits: 8
  parity: NONE
  stop_bits: 1

sml:
  id: mysml
  uart_id: uart_bus

globals:
  - id: global_sleep_duration
    type: float
    initial_value: '30.0'  # Default sleep duration in seconds

sensor:
  - platform: adc
    pin: GPIO3
    name: ${device_name}_VBAT
    id: batt_volt
    attenuation: auto
    # update_interval: 5s
    filters:
      - multiply: 2.25

  - platform: template
    name: "${device_name} Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};

  - platform: mqtt_subscribe
    id: sleepdurationsec
    topic: ${device_name}/sleepduration
    unit_of_measurement: 's'
    accuracy_decimals: 0
    on_value:
      then:
        - globals.set:
            id: global_sleep_duration
            value: !lambda 'return x;'  # Update the global variable with received value

  - platform: sml
    name: ${device_name}_energy
    sml_id: mysml
    obis_code: "1-0:1.8.0"
    unit_of_measurement: kWh
    accuracy_decimals: 4
    device_class: energy
    state_class: total_increasing
    force_update: true
    filters:
      - lambda: |-
          if (x > 10000) {
            return x * 0.0001;
          } else {
            return x;
          }

  - platform: sml
    name: ${device_name}_power
    sml_id: mysml
    obis_code: "1-0:36.7.0"
    unit_of_measurement: W
    accuracy_decimals: 2
    force_update: true
    filters:
      - multiply: 0.01

  - platform: sml
    name: ${device_name}_return_energy
    sml_id: mysml
    obis_code: "1-0:2.8.0"
    unit_of_measurement: kWh
    accuracy_decimals: 4
    device_class: energy
    state_class: total_increasing
    force_update: true
    filters:
      - lambda: |-
          if (x > 10000) {
            return x * 0.0001;
          } else {
            return x;
          }

light:
  - platform: binary
    name: "Red LED"
    internal: true
    output: red_led_output
    restore_mode: ALWAYS_OFF

output:
  - platform: gpio
    pin: 
      number: GPIO48
      inverted: false
      mode:
        output: true
        open_drain: true
    id: red_led_output

switch:
  # Turn on the power to the reading head selectively to save power
  # Pins are off during deep sleep
  - platform: gpio
    name: "Sensor GND"
    pin: 
      number: GPIO1
      inverted: true
      mode:
        output: true
        open_drain: true
      drive_strength: 5mA
    restore_mode: ALWAYS_ON
  - platform: gpio
    name: "Sensor VCC"
    pin: 
      number: GPIO2
      inverted: false
      mode:
        output: true
      drive_strength: 5mA
    restore_mode: ALWAYS_ON